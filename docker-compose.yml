services:
  db:
    image: postgres:17
    container_name: shared-db
    restart: unless-stopped
    shm_size: 512mb
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d postgres -h localhost -p 5432" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - shared-db-net
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  pgadmin:
    image: dpage/pgadmin4
    container_name: shared-pgadmin
    restart: unless-stopped
    env_file: .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "127.0.0.1:9090:80"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - shared-db-net
    logging:
      driver: "none"

  pgbackup:
    build: ./scripts
    container_name: shared-pgbackup
    restart: unless-stopped
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./rclone:/root/.config/rclone
      - ./scripts:/app
    healthcheck:
      test: ["CMD-SHELL", "pgrep crond || exit 1"]
      interval: 1m
      timeout: 10s
      retries: 3
    networks:
      - shared-db-net
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # dashboard:
  #   build:
  #     context: .
  #     dockerfile: dashboard/Dockerfile
  #   container_name: shared-dashboard
  #   restart: unless-stopped
  #   env_file: .env
  #   environment:
  #     DJANGO_DATABASE: postgres
  #     DJANGO_DB_HOST: db
  #     DJANGO_DB_PORT: 5432
  #     DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   volumes:
  #     - ./dashboard:/app
  #     - ./scripts:/app/scripts
  #     - ./rclone:/root/.config/rclone
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   ports:
  #     - "127.0.0.1:8000:8000"
  #   networks:
  #     - shared-db-net

volumes:
  postgres_data:
  pgadmin_data:

networks:
  shared-db-net:
    name: shared-db-net
    driver: bridge
